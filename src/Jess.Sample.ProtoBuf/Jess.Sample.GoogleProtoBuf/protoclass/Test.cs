// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: test.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Jess.Sample.GoogleProtoBuf {

  /// <summary>Holder for reflection information generated from test.proto</summary>
  public static partial class TestReflection {

    #region Descriptor
    /// <summary>File descriptor for test.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static TestReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cgp0ZXN0LnByb3RvEhpKZXNzLlNhbXBsZS5Hb29nbGVQcm90b0J1ZiIgCgRU",
            "ZXN0EgoKAklEGAEgASgFEgwKBE5hbWUYAiABKAkinQIKC1Rlc3RDb21wbGV4",
            "EgoKAklEGAEgASgFEgwKBE5hbWUYAiABKAkSCwoDU3RyGAMgASgJEg8KB1N0",
            "cl9SZXEYBCACKAkSEAoIaXNfX3RydWUYBSABKAgSEwoLSXNfVHJ1ZV9SZXEY",
            "BiACKAgSOgoIVGVzdEVudW0YByABKA4yKC5KZXNzLlNhbXBsZS5Hb29nbGVQ",
            "cm90b0J1Zi5UZXN0RW51bVR5cGUSPgoMVGVzdEVudW1fUmVxGAggAigOMigu",
            "SmVzcy5TYW1wbGUuR29vZ2xlUHJvdG9CdWYuVGVzdEVudW1UeXBlEjMKBUl0",
            "ZW1zGAkgAygLMiQuSmVzcy5TYW1wbGUuR29vZ2xlUHJvdG9CdWYuVGVzdEl0",
            "ZW0iJAoIVGVzdEl0ZW0SCgoCSUQYASABKAUSDAoESXRlbRgCIAEoCSowCgxU",
            "ZXN0RW51bVR5cGUSCQoFRmlyc3QQABIKCgZTZWNvbmQQARIJCgVUaGlyZBAC"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::Jess.Sample.GoogleProtoBuf.TestEnumType), }, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Jess.Sample.GoogleProtoBuf.Test), global::Jess.Sample.GoogleProtoBuf.Test.Parser, new[]{ "ID", "Name" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Jess.Sample.GoogleProtoBuf.TestComplex), global::Jess.Sample.GoogleProtoBuf.TestComplex.Parser, new[]{ "ID", "Name", "Str", "StrReq", "IsTrue", "IsTrueReq", "TestEnum", "TestEnumReq", "Items" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Jess.Sample.GoogleProtoBuf.TestItem), global::Jess.Sample.GoogleProtoBuf.TestItem.Parser, new[]{ "ID", "Item" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  public enum TestEnumType {
    [pbr::OriginalName("First")] First = 0,
    [pbr::OriginalName("Second")] Second = 1,
    [pbr::OriginalName("Third")] Third = 2,
  }

  #endregion

  #region Messages
  public sealed partial class Test : pb::IMessage<Test> {
    private static readonly pb::MessageParser<Test> _parser = new pb::MessageParser<Test>(() => new Test());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Test> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Jess.Sample.GoogleProtoBuf.TestReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Test() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Test(Test other) : this() {
      _hasBits0 = other._hasBits0;
      iD_ = other.iD_;
      name_ = other.name_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Test Clone() {
      return new Test(this);
    }

    /// <summary>Field number for the "ID" field.</summary>
    public const int IDFieldNumber = 1;
    private readonly static int IDDefaultValue = 0;

    private int iD_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ID {
      get { if ((_hasBits0 & 1) != 0) { return iD_; } else { return IDDefaultValue; } }
      set {
        _hasBits0 |= 1;
        iD_ = value;
      }
    }
    /// <summary>Gets whether the "ID" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasID {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "ID" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearID() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "Name" field.</summary>
    public const int NameFieldNumber = 2;
    private readonly static string NameDefaultValue = "";

    private string name_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_ ?? NameDefaultValue; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "Name" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasName {
      get { return name_ != null; }
    }
    /// <summary>Clears the value of the "Name" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearName() {
      name_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Test);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Test other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ID != other.ID) return false;
      if (Name != other.Name) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasID) hash ^= ID.GetHashCode();
      if (HasName) hash ^= Name.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HasID) {
        output.WriteRawTag(8);
        output.WriteInt32(ID);
      }
      if (HasName) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasID) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ID);
      }
      if (HasName) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Test other) {
      if (other == null) {
        return;
      }
      if (other.HasID) {
        ID = other.ID;
      }
      if (other.HasName) {
        Name = other.Name;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ID = input.ReadInt32();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class TestComplex : pb::IMessage<TestComplex> {
    private static readonly pb::MessageParser<TestComplex> _parser = new pb::MessageParser<TestComplex>(() => new TestComplex());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TestComplex> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Jess.Sample.GoogleProtoBuf.TestReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TestComplex() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TestComplex(TestComplex other) : this() {
      _hasBits0 = other._hasBits0;
      iD_ = other.iD_;
      name_ = other.name_;
      str_ = other.str_;
      strReq_ = other.strReq_;
      isTrue_ = other.isTrue_;
      isTrueReq_ = other.isTrueReq_;
      testEnum_ = other.testEnum_;
      testEnumReq_ = other.testEnumReq_;
      items_ = other.items_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TestComplex Clone() {
      return new TestComplex(this);
    }

    /// <summary>Field number for the "ID" field.</summary>
    public const int IDFieldNumber = 1;
    private readonly static int IDDefaultValue = 0;

    private int iD_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ID {
      get { if ((_hasBits0 & 1) != 0) { return iD_; } else { return IDDefaultValue; } }
      set {
        _hasBits0 |= 1;
        iD_ = value;
      }
    }
    /// <summary>Gets whether the "ID" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasID {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "ID" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearID() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "Name" field.</summary>
    public const int NameFieldNumber = 2;
    private readonly static string NameDefaultValue = "";

    private string name_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_ ?? NameDefaultValue; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "Name" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasName {
      get { return name_ != null; }
    }
    /// <summary>Clears the value of the "Name" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearName() {
      name_ = null;
    }

    /// <summary>Field number for the "Str" field.</summary>
    public const int StrFieldNumber = 3;
    private readonly static string StrDefaultValue = "";

    private string str_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Str {
      get { return str_ ?? StrDefaultValue; }
      set {
        str_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "Str" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasStr {
      get { return str_ != null; }
    }
    /// <summary>Clears the value of the "Str" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearStr() {
      str_ = null;
    }

    /// <summary>Field number for the "Str_Req" field.</summary>
    public const int StrReqFieldNumber = 4;
    private readonly static string StrReqDefaultValue = "";

    private string strReq_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string StrReq {
      get { return strReq_ ?? StrReqDefaultValue; }
      set {
        strReq_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "Str_Req" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasStrReq {
      get { return strReq_ != null; }
    }
    /// <summary>Clears the value of the "Str_Req" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearStrReq() {
      strReq_ = null;
    }

    /// <summary>Field number for the "is__true" field.</summary>
    public const int IsTrueFieldNumber = 5;
    private readonly static bool IsTrueDefaultValue = false;

    private bool isTrue_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsTrue {
      get { if ((_hasBits0 & 2) != 0) { return isTrue_; } else { return IsTrueDefaultValue; } }
      set {
        _hasBits0 |= 2;
        isTrue_ = value;
      }
    }
    /// <summary>Gets whether the "is__true" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasIsTrue {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "is__true" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearIsTrue() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "Is_True_Req" field.</summary>
    public const int IsTrueReqFieldNumber = 6;
    private readonly static bool IsTrueReqDefaultValue = false;

    private bool isTrueReq_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsTrueReq {
      get { if ((_hasBits0 & 4) != 0) { return isTrueReq_; } else { return IsTrueReqDefaultValue; } }
      set {
        _hasBits0 |= 4;
        isTrueReq_ = value;
      }
    }
    /// <summary>Gets whether the "Is_True_Req" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasIsTrueReq {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "Is_True_Req" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearIsTrueReq() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "TestEnum" field.</summary>
    public const int TestEnumFieldNumber = 7;
    private readonly static global::Jess.Sample.GoogleProtoBuf.TestEnumType TestEnumDefaultValue = global::Jess.Sample.GoogleProtoBuf.TestEnumType.First;

    private global::Jess.Sample.GoogleProtoBuf.TestEnumType testEnum_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Jess.Sample.GoogleProtoBuf.TestEnumType TestEnum {
      get { if ((_hasBits0 & 8) != 0) { return testEnum_; } else { return TestEnumDefaultValue; } }
      set {
        _hasBits0 |= 8;
        testEnum_ = value;
      }
    }
    /// <summary>Gets whether the "TestEnum" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasTestEnum {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "TestEnum" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearTestEnum() {
      _hasBits0 &= ~8;
    }

    /// <summary>Field number for the "TestEnum_Req" field.</summary>
    public const int TestEnumReqFieldNumber = 8;
    private readonly static global::Jess.Sample.GoogleProtoBuf.TestEnumType TestEnumReqDefaultValue = global::Jess.Sample.GoogleProtoBuf.TestEnumType.First;

    private global::Jess.Sample.GoogleProtoBuf.TestEnumType testEnumReq_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Jess.Sample.GoogleProtoBuf.TestEnumType TestEnumReq {
      get { if ((_hasBits0 & 16) != 0) { return testEnumReq_; } else { return TestEnumReqDefaultValue; } }
      set {
        _hasBits0 |= 16;
        testEnumReq_ = value;
      }
    }
    /// <summary>Gets whether the "TestEnum_Req" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasTestEnumReq {
      get { return (_hasBits0 & 16) != 0; }
    }
    /// <summary>Clears the value of the "TestEnum_Req" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearTestEnumReq() {
      _hasBits0 &= ~16;
    }

    /// <summary>Field number for the "Items" field.</summary>
    public const int ItemsFieldNumber = 9;
    private static readonly pb::FieldCodec<global::Jess.Sample.GoogleProtoBuf.TestItem> _repeated_items_codec
        = pb::FieldCodec.ForMessage(74, global::Jess.Sample.GoogleProtoBuf.TestItem.Parser);
    private readonly pbc::RepeatedField<global::Jess.Sample.GoogleProtoBuf.TestItem> items_ = new pbc::RepeatedField<global::Jess.Sample.GoogleProtoBuf.TestItem>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Jess.Sample.GoogleProtoBuf.TestItem> Items {
      get { return items_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TestComplex);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TestComplex other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ID != other.ID) return false;
      if (Name != other.Name) return false;
      if (Str != other.Str) return false;
      if (StrReq != other.StrReq) return false;
      if (IsTrue != other.IsTrue) return false;
      if (IsTrueReq != other.IsTrueReq) return false;
      if (TestEnum != other.TestEnum) return false;
      if (TestEnumReq != other.TestEnumReq) return false;
      if(!items_.Equals(other.items_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasID) hash ^= ID.GetHashCode();
      if (HasName) hash ^= Name.GetHashCode();
      if (HasStr) hash ^= Str.GetHashCode();
      if (HasStrReq) hash ^= StrReq.GetHashCode();
      if (HasIsTrue) hash ^= IsTrue.GetHashCode();
      if (HasIsTrueReq) hash ^= IsTrueReq.GetHashCode();
      if (HasTestEnum) hash ^= TestEnum.GetHashCode();
      if (HasTestEnumReq) hash ^= TestEnumReq.GetHashCode();
      hash ^= items_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HasID) {
        output.WriteRawTag(8);
        output.WriteInt32(ID);
      }
      if (HasName) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      if (HasStr) {
        output.WriteRawTag(26);
        output.WriteString(Str);
      }
      if (HasStrReq) {
        output.WriteRawTag(34);
        output.WriteString(StrReq);
      }
      if (HasIsTrue) {
        output.WriteRawTag(40);
        output.WriteBool(IsTrue);
      }
      if (HasIsTrueReq) {
        output.WriteRawTag(48);
        output.WriteBool(IsTrueReq);
      }
      if (HasTestEnum) {
        output.WriteRawTag(56);
        output.WriteEnum((int) TestEnum);
      }
      if (HasTestEnumReq) {
        output.WriteRawTag(64);
        output.WriteEnum((int) TestEnumReq);
      }
      items_.WriteTo(output, _repeated_items_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasID) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ID);
      }
      if (HasName) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (HasStr) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Str);
      }
      if (HasStrReq) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(StrReq);
      }
      if (HasIsTrue) {
        size += 1 + 1;
      }
      if (HasIsTrueReq) {
        size += 1 + 1;
      }
      if (HasTestEnum) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) TestEnum);
      }
      if (HasTestEnumReq) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) TestEnumReq);
      }
      size += items_.CalculateSize(_repeated_items_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TestComplex other) {
      if (other == null) {
        return;
      }
      if (other.HasID) {
        ID = other.ID;
      }
      if (other.HasName) {
        Name = other.Name;
      }
      if (other.HasStr) {
        Str = other.Str;
      }
      if (other.HasStrReq) {
        StrReq = other.StrReq;
      }
      if (other.HasIsTrue) {
        IsTrue = other.IsTrue;
      }
      if (other.HasIsTrueReq) {
        IsTrueReq = other.IsTrueReq;
      }
      if (other.HasTestEnum) {
        TestEnum = other.TestEnum;
      }
      if (other.HasTestEnumReq) {
        TestEnumReq = other.TestEnumReq;
      }
      items_.Add(other.items_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ID = input.ReadInt32();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
          case 26: {
            Str = input.ReadString();
            break;
          }
          case 34: {
            StrReq = input.ReadString();
            break;
          }
          case 40: {
            IsTrue = input.ReadBool();
            break;
          }
          case 48: {
            IsTrueReq = input.ReadBool();
            break;
          }
          case 56: {
            TestEnum = (global::Jess.Sample.GoogleProtoBuf.TestEnumType) input.ReadEnum();
            break;
          }
          case 64: {
            TestEnumReq = (global::Jess.Sample.GoogleProtoBuf.TestEnumType) input.ReadEnum();
            break;
          }
          case 74: {
            items_.AddEntriesFrom(input, _repeated_items_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class TestItem : pb::IMessage<TestItem> {
    private static readonly pb::MessageParser<TestItem> _parser = new pb::MessageParser<TestItem>(() => new TestItem());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TestItem> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Jess.Sample.GoogleProtoBuf.TestReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TestItem() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TestItem(TestItem other) : this() {
      _hasBits0 = other._hasBits0;
      iD_ = other.iD_;
      item_ = other.item_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TestItem Clone() {
      return new TestItem(this);
    }

    /// <summary>Field number for the "ID" field.</summary>
    public const int IDFieldNumber = 1;
    private readonly static int IDDefaultValue = 0;

    private int iD_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ID {
      get { if ((_hasBits0 & 1) != 0) { return iD_; } else { return IDDefaultValue; } }
      set {
        _hasBits0 |= 1;
        iD_ = value;
      }
    }
    /// <summary>Gets whether the "ID" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasID {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "ID" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearID() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "Item" field.</summary>
    public const int ItemFieldNumber = 2;
    private readonly static string ItemDefaultValue = "";

    private string item_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Item {
      get { return item_ ?? ItemDefaultValue; }
      set {
        item_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "Item" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasItem {
      get { return item_ != null; }
    }
    /// <summary>Clears the value of the "Item" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearItem() {
      item_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TestItem);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TestItem other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ID != other.ID) return false;
      if (Item != other.Item) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasID) hash ^= ID.GetHashCode();
      if (HasItem) hash ^= Item.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HasID) {
        output.WriteRawTag(8);
        output.WriteInt32(ID);
      }
      if (HasItem) {
        output.WriteRawTag(18);
        output.WriteString(Item);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasID) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ID);
      }
      if (HasItem) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Item);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TestItem other) {
      if (other == null) {
        return;
      }
      if (other.HasID) {
        ID = other.ID;
      }
      if (other.HasItem) {
        Item = other.Item;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ID = input.ReadInt32();
            break;
          }
          case 18: {
            Item = input.ReadString();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
